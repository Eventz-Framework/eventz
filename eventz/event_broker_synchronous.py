import logging
import os

from eventz.packets import Packet
from eventz.protocols import (
    EventBrokerProtocol,
    PacketManagerProtocol, PublisherProtocol,
    PublisherRegistryProtocol,
    ServiceRegistryProtocol, SubscriptionRegistryProtocol,
)

log = logging.getLogger(__name__)
log.setLevel(os.getenv("LOG_LEVEL", "DEBUG"))


class EventBrokerSynchronous(EventBrokerProtocol):
    def __init__(
        self,
        service_registry: ServiceRegistryProtocol,
        publisher_registry: PublisherRegistryProtocol,
        subscription_registry: SubscriptionRegistryProtocol,
        packet_manager: PacketManagerProtocol,
    ):
        self._service_registry: ServiceRegistryProtocol = service_registry
        self._publisher_registry: PublisherRegistryProtocol = publisher_registry
        self._subscription_registry: SubscriptionRegistryProtocol = subscription_registry
        self._packet_manager: PacketManagerProtocol = packet_manager

    def handle(self, command_packet: Packet) -> None:
        log.debug(f"Incoming {command_packet=}")
        service = self._service_registry.get_service(command_packet.route)
        domain_command = service.domain_command_from_packet(command_packet)
        log.debug(f"Domain command obtained is {domain_command=}")

        this_subscriber = command_packet.subscribers[0]
        all_subscribers = self._subscription_registry.fetch(domain_command.aggregate_id)
        other_subscribers = tuple(filter(lambda s: s != this_subscriber, all_subscribers))

        log.debug(f"Other subscribers are {other_subscribers=}")
        self._subscription_registry.register(
            domain_command.aggregate_id,
            this_subscriber,
        )

        self._packet_manager.init_dialog(
            command_packet=command_packet,
            other_subscribers=other_subscribers,
        )

        # for a broadcast command, publish command to all other subscribers - for unicast move on
        broadcast_command_packet = self._packet_manager.get_broadcast_command_packet()
        if broadcast_command_packet:
            log.debug(f"Publishing broadcast command {broadcast_command_packet=}")
            self._publisher_registry.publish(broadcast_command_packet)

        # publish ack to all of the command's subscribers
        # just the emitter of the command in the case of a unicast command
        # or all of the subscribers in the case of a broadcast command
        ack_packet = self._packet_manager.get_ack_packet()
        log.debug(f"Publishing ack packet {ack_packet=}")
        self._publisher_registry.publish(ack_packet)

        events = service.process(command=domain_command)
        log.debug(f"Events generated by command: {events=}")
        events_sent = []
        for event in events:
            event_packet = self._packet_manager.get_next_event_packet(event, events_sent)
            log.debug(f"Publishing event packet {event_packet=}")
            self._publisher_registry.publish(event_packet)
            events_sent.append(event_packet)

        done_packet = self._packet_manager.get_done_event_packet(events_sent)
        log.debug(f"Publishing done packet {done_packet=}")
        self._publisher_registry.publish(done_packet)

    def get_publisher(self, publisher_name: str) -> PublisherProtocol:
        return self._publisher_registry.get_publisher(publisher_name=publisher_name)
